<script>
    function onRequestEnd(e) {
        if (e.type == "update" || e.type == "create" || e.type == "remove") {
            $("#UsersGrid").data("kendoGrid").dataSource.read();
        }
    }

    function onSave(e) {
        let userName = e.sender.dataItem(e.container).UserName.trim();
        let userId = e.sender.dataItem(e.container).UserId;
        let isValid = false;

        if (userName != '')
        {
            $.ajax({
                url: '@Url.Action("GetUserByUserName","User")',
                type: 'POST',
                async: false,
                cache: false,
                timeout: 10000,
                data: { userName: userName, userId: userId },
                error: function () {
                    return true;
                },
                success: function (data) {
                    if (data) {
                        isValid = true;
                    }
                    else {
                        alert("User Name already exists.");
                    }
                }
            });
        }
        else
        {
            alert("User Name must have a valid value.");
        }

        console.log(isValid);

        if (!isValid)
            e.preventDefault();
    }

</script>

@(Html.Kendo().Grid<UserViewModel>()
        .Name("UsersGrid")
        .Columns(columns =>
        {
            columns.Command(command => { command.Edit().Text(" ").CancelText(" ").UpdateText(" "); command.Destroy().Text(" "); }).Width(100);
            columns.Bound(o => o.UserId).Visible(false);
            columns.Bound(o => o.UserName).HtmlAttributes(new { @style = "vertical-align: top;" });
            columns.Bound(o => o.LastName).HtmlAttributes(new { @style = "vertical-align: top;" });
            columns.Bound(o => o.FirstName).HtmlAttributes(new { @style = "vertical-align: top;" });
            columns.Bound(o => o.Role).HtmlAttributes(new { @style = "vertical-align: top;" });
            columns.Template(@<text> </text>).Title("");
        })
        .Scrollable()
        .DataSource(dataSource => dataSource
            .Ajax()
            .ServerOperation(true)
            .Model(model =>
                {
                    model.Id(c => c.UserId);
                    model.Field(e => e.UserId).DefaultValue(new Guid());
                })
            .Read(read => read.Action("Read", "User"))
            .Destroy(destroy => destroy.Action("Destroy", "User"))
            .Update(update => update.Action("Update", "User"))
            .Create(create => create.Action("Create", "User"))
            .Events(events => events.RequestEnd("onRequestEnd"))
        )
        .Pageable(pageable => pageable
        .ButtonCount(5)
                            .PageSizes(new[] { 5, 10, 25, 50, 100 })
        )
    .Sortable()
    .Filterable()
    .ToolBar(toolbar => { toolbar.Create().Text("Add"); })
    .Editable(editable => editable.Mode(GridEditMode.InLine))
    .NoRecords("No Users.")
    .Events(e => e.Save("onSave"))
)



